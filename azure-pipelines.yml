# File: azure-pipelines.yml
# Date: 5-Jul-2019 jdw
#       CI/CD example

trigger:
- master

pr:
- master

schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - master
  always: true

jobs:
  - job: 'test_linux'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
        Python27:
          python.version: '2.7'
      maxParallel: 2
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          addToPath: true
      - checkout: self
        submodules: true
      - script: which apt
        displayName: 'Installing OS dependencies'
      - script: apt-cache policy | grep http | awk '{print $2 $3}' | sort -u
        displayName: 'Checking for repos'
      - script: sudo apt-get install flex
        displayName: 'Install flex'
      - script: sudo apt-get install bison
        displayName: 'Install bison'
      #
      - script: python -m pip install --upgrade pip tox
        displayName: 'Install tools'
      #
      - script: pip install -r requirements.txt
        displayName: 'Install dependencies'
      #
      - script: tox -v
        displayName: 'Run Tox'
      #
      #  Build artifacts
      - script: pip install --upgrade pip twine setuptools wheel
        displayName: "Acquire build tools"
      - script: python setup.py  sdist --dist-dir "$(System.DefaultWorkingDirectory)/dist"
        displayName: "Build source dist"
      - script: python setup.py  bdist_wheel --dist-dir "$(System.DefaultWorkingDirectory)/dist"
        displayName: "Build wheel"
      #
      #- script: pip wheel --wheel-dir "$(System.DefaultWorkingDirectory)/dist"  .
      #  displayName: 'Build wheel'
      # Check the install artifacts
      - script: ls -lR $(System.DefaultWorkingDirectory)/
        displayName: "Listing of installed software"
  #
  - job: 'publish'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
        Python27:
          python.version: '2.7'
      maxParallel: 2
    dependsOn:
    - test_linux
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    #
    steps:
      - task: UsePythonVersion@0
        displayName: 'Using Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'
          addToPath: true
      - checkout: self
        submodules: true
      #
      - script: sudo apt-get install flex
        displayName: 'Install flex'
      - script: sudo apt-get install bison
        displayName: 'Install bison'

      - script: python -m pip install --upgrade pip twine setuptools wheel
        displayName: 'Install tools'

      - script: pip install -r requirements.txt
        displayName: 'Install dependencies'
      #
      - script: python setup.py  sdist --dist-dir "$(System.DefaultWorkingDirectory)/dist"
        displayName: "Build source dist"
      - script: python setup.py  bdist_wheel --dist-dir "$(System.DefaultWorkingDirectory)/dist"
        displayName: "Build wheel"
      #
      #- script: pip wheel --wheel-dir "$(System.DefaultWorkingDirectory)/dist"  .
      #  displayName: 'Build wheel'
      # Check the install artifacts
      #
      - script: ls -lR $(System.DefaultWorkingDirectory)/
        displayName: "Listing of installed software"
      #
      - task: TwineAuthenticate@0
        inputs:
          externalFeeds: 'pypitest'
      # Check the install artifacts
      - script: ls -lR $(System.DefaultWorkingDirectory)/dist
        displayName: "Listing of installed software"
        # Try upload
      - script: 'twine upload -r pypitest --config-file $(PYPIRC_PATH) $(System.DefaultWorkingDirectory)/dist/*'
        displayName: "Upload sdist and wheel to PyPi"
